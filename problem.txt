Implement a microservice that exposes an API to solve different mathematical operations:
- the pow function
- the n-th fibbonaci number
- the factorial of the number

Use a database to persist all the requests to the API. Expose the service as an API (not SOAP). Design the service as production ready service.

Nice to haves: containerization, monitoring, caching, authorization, logging via a messaging/streaming framework.

All implementation and design is up to you, following the below restirctions:
- use a micro framework (any Flask-like will do, sync or async is up to you)
- follow micro services development best practices (MVC/MVCS patterns)
- use any API standard except SOAP
- consider an implementation that supports extensibility
- as the database layer, use any SQL or NoSQL solution (for simplicity, SQLite will do)
- you can choose to solve the problem with async workers/multithreading that perform the calculations (and communicate through multithreading or async queues).
- use pydantic for serialization/deserialization

You don't have to implement everything in this document as long as you provide some working functionality. For evaluation purposes,
either share a public repository with the code or a zip archive at least 1 day before your face to face technical interview.


math_service/
├── app/                                   # Main application package
│   ├── __init__.py                        # Initializes the Flask app and loads routes
│   ├── config.py                          # Application configuration (e.g., environment variables, settings)
│   ├── database.py                        # Database initialization and session management
│
│   ├── consumers/
│   │   └── zmq_log_consumer.py            # ZMQ log subscriber that listens for logs and prints them
│
│   ├── controllers/
│   │   └── math_controller.py             # Controller functions for factorial, fibonacci, and power operations
│
│   ├── models/
│   │   └── request.py                     # Defines the MathRequest model used to store API requests
│
│   ├── routes/
│   │   └── api_routes.py                  # Maps URL paths to controller functions
│
│   ├── schemas/                           # Pydantic models for request/response validation and serialization
│   │   └── request_schema.py
│
│   ├── services/
│   │   └── math_service.py                # Implements factorial, fibonacci, and power algorithms
│
│   ├── templates/                         # HTML templates
│   │   └── index.html
│
│   └── utils/                             # Reusable utility modules
│       ├── cache.py                       # Caching utilities (memoization with Flask-Caching)
│       ├── errors.py                      # Custom error handlers and response formatting
│       ├── worker.py                      # Background worker for async processing
│       └── zmq_logger.py                  # ZMQ log publisher used to send structured log messages
│
├──tests/                                  # Unit tests for the application
│    ├── conftest.py                       # Pytest configuration and fixtures
│    ├── test_routes.py                    # Tests for API routes and endpoints
│    ├── test_services.py                  # Tests for service logic (factorial, fibonacci, power)
│    ├── test_models.py                    # Tests for database models and request persistence
│    ├── test_utils.py                     # Tests for utility functions (caching, error handling)
│    ├── test_schemas.py                   # Tests for Pydantic schemas and validation
│
├── run.py                                 # Application entrypoint: initializes DB, runs Flask, starts log consumer
├── requirements.txt                       # Python dependencies for the project (installed via pip)
├── Dockerfile                             # Instructions to build a Docker image of the microservice
├── .env                                   # Environment-specific configuration variables (e.g., DB_URL, SECRET)
├── .flake8                                # Linting rules for flake8
├── problem.txt                            # Project description
└── README.md                              # Project overview, setup instructions, API documentation

https://app.swaggerhub.com/apis/red-469/MathMicroservice/1.0.0

# docker build -t math-service .
# docker run -d -p 5000:5000 --name math-api math-service
# docker stop math-api
# docker rm math-api
# docker save -o math-service.tar math-service